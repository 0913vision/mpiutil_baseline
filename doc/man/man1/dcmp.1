.\" Automatically generated by Pandoc 1.19.1
.\"
.TH "DCMP" "1" "" "" ""
.hy
.SH NAME
.PP
dcmp \- distributed \f[I]cmp(1)\f[] program
.SH SYNOPSIS
.PP
\f[B]dcmp [OPTION] SOURCE DEST \f[]
.SH DESCRIPTION
.PP
Parallel MPI application to recurseively walk, and then compare files
with the same name that live in different directories.
This tools is similar to \f[I]cmp(1)\f[].
Also, it will tell you how many files in two different directories are
the same (or different), out of the total set of files and directories.
.PP
dcmp prrovides functionality similar to \f[I]cmp(1)\f[].
.SH OPTIONS
.TP
.B \-b, \-\-base
Do a base comparison.
.RS
.RE
.TP
.B \-o, \-\-output=<FIELD0=STATE0@FIELD1=STATE1,FIELD2=STATE2:FILE>
write output fields and states to a file.
.RS
.RE
.TP
.B \-h, \-\-help
Print the command usage, and the list of options available.
.RS
.RE
.TP
.B \-v, \-\-verbose
Prints a list of statistics/timing data for the command.
Files walked, started, completed, seconds, files, bytes read, byte rate,
and file rate.
.RS
.RE
.SH EXAMPLES
.PP
Example will use 4 nodes: 1.
salloc \-N4 \-ppdebug
.PP
Compare two files in different directories: 2.
srun \-n4 dcmp /src1/file1 /src2/file2
.PP
Compare two directories with verbose output.
The verbose output will give you the timing & bytes read info as well:
3.
srun \-n4 dcmp \-v /src1 /src2
.SS Known bugs
.PP
None found (so far).
.SH SEE ALSO
.PP
\f[C]dchmod\f[] (1).
\f[C]dcp\f[] (1).
\f[C]drm\f[] (1).
\f[C]dwalk\f[] (1).
.PP
The mpiFileUtils source code and all documentation may be downloaded
from <http://fileutils.io>
