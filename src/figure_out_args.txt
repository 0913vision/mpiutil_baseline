
/*
 * First we need to determine if the last argument is a file or a directory.
 * We first attempt to see if the last argument already exists on disk. If it
 * doesn't, we then look at the sources to see if we can determine what the
 * last argument should be.
 */
if(is_file(last_argument) {
    last_argument_is_file = true
    last_argument_is_dir = false
} elif( is_dir(last_argument) {
    last_argument_is_dir = true
    last_argument_is_file = false
} else {
    if(allow_recursion) {
        /*
         * If recursion is turned on, we can have a file or a directory as the
         * destination. We can determine what it is by looking at the source
         * arguments. If the source arguments contain a single file, then the
         * destination must be a single file. We prune out the impossible
         * combinations later on.
         */
         for(src in srcs) {
             if (is_file(src)) {
                 last_argument_is_file = true
             }
         }
         last_argument_is_dir = !last_argument_is_file
    } else {
        /*
         * Since recursion is turned off, there's only potential to create a
         * file at the destination.
         */
        last_argument_is_file = true
    }
}

/*
 * We start off with all of the following potential options in mind and prune
 * them until we figure out what situation we have.
 *
 * Source must overwrite destination.
 *   - Single file to single file
 *
 * Must return an error. Impossible condition.
 *   - Single directory to single file
 *   - Many file to single file
 *   - Many directory to single file
 *   - Many directory and many file to single file
 *
 * All Sources must be placed inside destination.
 *   - Single file to single directory
 *   - Single directory to single directory
 *   - Many file to single directory
 *   - Many directory to single directory
 *   - Many file and many directory to single directory
 */
if( last_argument_is_file ) {
    /*
     * If the destination is a file, there must be only one source object, and it
     * must be a file.
     */
    if( number_of_source_files == 1 && is_file(src_path) ) {
        set_base(basename_of_last_argument)
        push_queue(absolute src path);
    } else {
        /*
         * This is the catch-all for impossible conditions.
         */
        error(print impossible condition)
    }

} elif( last_argument_is_directory ) {
    /*
     * Since the destination is a directory, we use that as a base so we can
     * copy all of the source objects into it.
     */
    set_base(last_argument)
    for(src in srcs) {
        push_queue(absolute src path)
    }

} else {
    /*
     * This is the catch-all for all of the object types we haven't
     * implemented yet.
     */
    print("unsupported filetype");
}

/* EOF */
